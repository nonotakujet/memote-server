/*
 * memote
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package viewmodel

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A LocationsApiController binds http requests to an api service and writes the service results to the http response
type LocationsApiController struct {
	service LocationsApiServicer
}

// NewLocationsApiController creates a default api controller
func NewLocationsApiController(s LocationsApiServicer) Router {
	return &LocationsApiController{service: s}
}

// Routes returns all of the api route for the LocationsApiController
func (c *LocationsApiController) Routes() Routes {
	return Routes{ 
		{
			"PostLocations",
			strings.ToUpper("Post"),
			"/locations",
			c.PostLocations,
		},
	}
}

// PostLocations - post a locations
func (c *LocationsApiController) PostLocations(w http.ResponseWriter, r *http.Request) {
	locationViewModel := &[]LocationViewModel{}
	if err := json.NewDecoder(r.Body).Decode(&locationViewModel); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.PostLocations(r.Context(), *locationViewModel)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
